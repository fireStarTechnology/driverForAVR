
myAVRlib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000348  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c1  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a6  00000000  00000000  00000c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029f  00000000  00000000  000012b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000395  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fc  00000000  00000000  00001941  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001a3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 a2 01 	jmp	0x344	; 0x344 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "uart.h"
//#include "uart.c"

int main(void)
{
	uartInit(0,9600,8,1,1);                               //uartInit(uint8_t uartNum, uint16_t baudRate,  uint8_t dataBit,  uint8_t parity,  uint8_t stopBit)
  80:	01 e0       	ldi	r16, 0x01	; 1
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	48 e0       	ldi	r20, 0x08	; 8
  86:	60 e8       	ldi	r22, 0x80	; 128
  88:	75 e2       	ldi	r23, 0x25	; 37
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	0e 94 49 00 	call	0x92	; 0x92 <uartInit>
  90:	ff cf       	rjmp	.-2      	; 0x90 <main+0x10>

00000092 <uartInit>:
}

*/

bool uartInit(uint8_t uartNum, uint16_t baudRate,  uint8_t dataBit,  uint8_t parity,  uint8_t stopBit)
{
  92:	0f 93       	push	r16
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	c4 2f       	mov	r28, r20
  9a:	d2 2f       	mov	r29, r18
	uint16_t UBBRValue = lrint(( F_CPU / (16L * baudRate) ) - 1);   //Baud calculator formula
  9c:	cb 01       	movw	r24, r22
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	aa 1f       	adc	r26, r26
  a8:	bb 1f       	adc	r27, r27
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	aa 1f       	adc	r26, r26
  b0:	bb 1f       	adc	r27, r27
  b2:	9c 01       	movw	r18, r24
  b4:	ad 01       	movw	r20, r26
  b6:	22 0f       	add	r18, r18
  b8:	33 1f       	adc	r19, r19
  ba:	44 1f       	adc	r20, r20
  bc:	55 1f       	adc	r21, r21
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	44 1f       	adc	r20, r20
  c4:	55 1f       	adc	r21, r21
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	74 e2       	ldi	r23, 0x24	; 36
  ca:	84 ef       	ldi	r24, 0xF4	; 244
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__divmodsi4>
  d2:	ca 01       	movw	r24, r20
  d4:	b9 01       	movw	r22, r18
  d6:	61 50       	subi	r22, 0x01	; 1
  d8:	71 09       	sbc	r23, r1
  da:	81 09       	sbc	r24, r1
  dc:	91 09       	sbc	r25, r1
  de:	0e 94 c0 00 	call	0x180	; 0x180 <__floatsisf>
  e2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lrint>
	// change 0 to 1 if u need 1st channel UART arduino-uno has only one I guess
	UBRR0H = (unsigned char) (UBBRValue >> 8);   //   Put the upper part of the baud number here (bits 8 to 11)
  e6:	27 2f       	mov	r18, r23
  e8:	33 27       	eor	r19, r19
  ea:	20 93 c5 00 	sts	0x00C5, r18	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>

	UBRR0L = (unsigned char) UBBRValue;          //   Put the remaining part of the baud number here
  ee:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0B = (1 << RXEN0)  | (1 << TXEN0);      //    Enabling Rx,Tx 
  f2:	88 e1       	ldi	r24, 0x18	; 24
  f4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	// The data bit part
	if (dataBit == 6)
  f8:	c6 30       	cpi	r28, 0x06	; 6
  fa:	31 f4       	brne	.+12     	; 0x108 <uartInit+0x76>
	{
		UCSR0C |= (1 << UCSZ00);      //  6 Length of data bits	
  fc:	e2 ec       	ldi	r30, 0xC2	; 194
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	82 60       	ori	r24, 0x02	; 2
 104:	80 83       	st	Z, r24
 106:	10 c0       	rjmp	.+32     	; 0x128 <uartInit+0x96>
	}
	if (dataBit == 7)
 108:	c7 30       	cpi	r28, 0x07	; 7
 10a:	31 f4       	brne	.+12     	; 0x118 <uartInit+0x86>
	{
		UCSR0C |= (2 << UCSZ00);      //  6 Length of data bits
 10c:	e2 ec       	ldi	r30, 0xC2	; 194
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	84 60       	ori	r24, 0x04	; 4
 114:	80 83       	st	Z, r24
 116:	0f c0       	rjmp	.+30     	; 0x136 <uartInit+0xa4>
	}
	if (dataBit == 8)
 118:	c8 30       	cpi	r28, 0x08	; 8
 11a:	31 f4       	brne	.+12     	; 0x128 <uartInit+0x96>
	{
		UCSR0C |= (3 << UCSZ00);      //  6 Length of data bits
 11c:	e2 ec       	ldi	r30, 0xC2	; 194
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	86 60       	ori	r24, 0x06	; 6
 124:	80 83       	st	Z, r24
 126:	07 c0       	rjmp	.+14     	; 0x136 <uartInit+0xa4>
	}
	if (dataBit == 9)
 128:	c9 30       	cpi	r28, 0x09	; 9
 12a:	29 f4       	brne	.+10     	; 0x136 <uartInit+0xa4>
	{
		UCSR0C |= (7 << UCSZ00);      //  6 Length of data bits
 12c:	e2 ec       	ldi	r30, 0xC2	; 194
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	8e 60       	ori	r24, 0x0E	; 14
 134:	80 83       	st	Z, r24
	}
	
	
	// The parity Part	
	if (parity == EVEN)
 136:	d1 11       	cpse	r29, r1
 138:	06 c0       	rjmp	.+12     	; 0x146 <uartInit+0xb4>
	{
		UCSR0C |=(1 << UPM01);        //   Even parity setting
 13a:	e2 ec       	ldi	r30, 0xC2	; 194
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	80 62       	ori	r24, 0x20	; 32
 142:	80 83       	st	Z, r24
 144:	07 c0       	rjmp	.+14     	; 0x154 <uartInit+0xc2>
	}
	if (parity == ODD)
 146:	d1 30       	cpi	r29, 0x01	; 1
 148:	29 f4       	brne	.+10     	; 0x154 <uartInit+0xc2>
	{
		UCSR0C |=(3 << UPM00);        //   Odd Parity setting
 14a:	e2 ec       	ldi	r30, 0xC2	; 194
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	80 63       	ori	r24, 0x30	; 48
 152:	80 83       	st	Z, r24
	}
	
	
	//Stop bit part 
	if (stopBit == 2)
 154:	02 30       	cpi	r16, 0x02	; 2
 156:	31 f4       	brne	.+12     	; 0x164 <uartInit+0xd2>
	{
		UCSR0C |= (1 << USBS0);      //  set 2 STOP bits	
 158:	e2 ec       	ldi	r30, 0xC2	; 194
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	88 60       	ori	r24, 0x08	; 8
 160:	80 83       	st	Z, r24
 162:	07 c0       	rjmp	.+14     	; 0x172 <uartInit+0xe0>
	}
	if (stopBit == 1)
 164:	01 30       	cpi	r16, 0x01	; 1
 166:	29 f4       	brne	.+10     	; 0x172 <uartInit+0xe0>
	{
		UCSR0C &= ~(1 << USBS0);      //clears the USBS for 1 stop bit    
 168:	e2 ec       	ldi	r30, 0xC2	; 194
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	87 7f       	andi	r24, 0xF7	; 247
 170:	80 83       	st	Z, r24
	}
	return 0;
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	0f 91       	pop	r16
 17a:	08 95       	ret

0000017c <__floatunsisf>:
 17c:	e8 94       	clt
 17e:	09 c0       	rjmp	.+18     	; 0x192 <__floatsisf+0x12>

00000180 <__floatsisf>:
 180:	97 fb       	bst	r25, 7
 182:	3e f4       	brtc	.+14     	; 0x192 <__floatsisf+0x12>
 184:	90 95       	com	r25
 186:	80 95       	com	r24
 188:	70 95       	com	r23
 18a:	61 95       	neg	r22
 18c:	7f 4f       	sbci	r23, 0xFF	; 255
 18e:	8f 4f       	sbci	r24, 0xFF	; 255
 190:	9f 4f       	sbci	r25, 0xFF	; 255
 192:	99 23       	and	r25, r25
 194:	a9 f0       	breq	.+42     	; 0x1c0 <__floatsisf+0x40>
 196:	f9 2f       	mov	r31, r25
 198:	96 e9       	ldi	r25, 0x96	; 150
 19a:	bb 27       	eor	r27, r27
 19c:	93 95       	inc	r25
 19e:	f6 95       	lsr	r31
 1a0:	87 95       	ror	r24
 1a2:	77 95       	ror	r23
 1a4:	67 95       	ror	r22
 1a6:	b7 95       	ror	r27
 1a8:	f1 11       	cpse	r31, r1
 1aa:	f8 cf       	rjmp	.-16     	; 0x19c <__floatsisf+0x1c>
 1ac:	fa f4       	brpl	.+62     	; 0x1ec <__floatsisf+0x6c>
 1ae:	bb 0f       	add	r27, r27
 1b0:	11 f4       	brne	.+4      	; 0x1b6 <__floatsisf+0x36>
 1b2:	60 ff       	sbrs	r22, 0
 1b4:	1b c0       	rjmp	.+54     	; 0x1ec <__floatsisf+0x6c>
 1b6:	6f 5f       	subi	r22, 0xFF	; 255
 1b8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ba:	8f 4f       	sbci	r24, 0xFF	; 255
 1bc:	9f 4f       	sbci	r25, 0xFF	; 255
 1be:	16 c0       	rjmp	.+44     	; 0x1ec <__floatsisf+0x6c>
 1c0:	88 23       	and	r24, r24
 1c2:	11 f0       	breq	.+4      	; 0x1c8 <__floatsisf+0x48>
 1c4:	96 e9       	ldi	r25, 0x96	; 150
 1c6:	11 c0       	rjmp	.+34     	; 0x1ea <__floatsisf+0x6a>
 1c8:	77 23       	and	r23, r23
 1ca:	21 f0       	breq	.+8      	; 0x1d4 <__floatsisf+0x54>
 1cc:	9e e8       	ldi	r25, 0x8E	; 142
 1ce:	87 2f       	mov	r24, r23
 1d0:	76 2f       	mov	r23, r22
 1d2:	05 c0       	rjmp	.+10     	; 0x1de <__floatsisf+0x5e>
 1d4:	66 23       	and	r22, r22
 1d6:	71 f0       	breq	.+28     	; 0x1f4 <__floatsisf+0x74>
 1d8:	96 e8       	ldi	r25, 0x86	; 134
 1da:	86 2f       	mov	r24, r22
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	2a f0       	brmi	.+10     	; 0x1ec <__floatsisf+0x6c>
 1e2:	9a 95       	dec	r25
 1e4:	66 0f       	add	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	88 1f       	adc	r24, r24
 1ea:	da f7       	brpl	.-10     	; 0x1e2 <__floatsisf+0x62>
 1ec:	88 0f       	add	r24, r24
 1ee:	96 95       	lsr	r25
 1f0:	87 95       	ror	r24
 1f2:	97 f9       	bld	r25, 7
 1f4:	08 95       	ret

000001f6 <lrint>:
 1f6:	0e 94 40 01 	call	0x280	; 0x280 <__fp_splitA>
 1fa:	a8 f1       	brcs	.+106    	; 0x266 <lrint+0x70>
 1fc:	9e 57       	subi	r25, 0x7E	; 126
 1fe:	b0 f1       	brcs	.+108    	; 0x26c <lrint+0x76>
 200:	98 51       	subi	r25, 0x18	; 24
 202:	60 f0       	brcs	.+24     	; 0x21c <lrint+0x26>
 204:	39 f1       	breq	.+78     	; 0x254 <lrint+0x5e>
 206:	98 30       	cpi	r25, 0x08	; 8
 208:	70 f5       	brcc	.+92     	; 0x266 <lrint+0x70>
 20a:	09 2e       	mov	r0, r25
 20c:	99 27       	eor	r25, r25
 20e:	66 0f       	add	r22, r22
 210:	77 1f       	adc	r23, r23
 212:	88 1f       	adc	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	0a 94       	dec	r0
 218:	d1 f7       	brne	.-12     	; 0x20e <lrint+0x18>
 21a:	1c c0       	rjmp	.+56     	; 0x254 <lrint+0x5e>
 21c:	bb 27       	eor	r27, r27
 21e:	99 3f       	cpi	r25, 0xF9	; 249
 220:	4c f4       	brge	.+18     	; 0x234 <lrint+0x3e>
 222:	b1 11       	cpse	r27, r1
 224:	b1 e0       	ldi	r27, 0x01	; 1
 226:	b6 2b       	or	r27, r22
 228:	67 2f       	mov	r22, r23
 22a:	78 2f       	mov	r23, r24
 22c:	88 27       	eor	r24, r24
 22e:	98 5f       	subi	r25, 0xF8	; 248
 230:	b1 f7       	brne	.-20     	; 0x21e <lrint+0x28>
 232:	08 c0       	rjmp	.+16     	; 0x244 <lrint+0x4e>
 234:	86 95       	lsr	r24
 236:	77 95       	ror	r23
 238:	67 95       	ror	r22
 23a:	b7 95       	ror	r27
 23c:	08 f4       	brcc	.+2      	; 0x240 <lrint+0x4a>
 23e:	b1 60       	ori	r27, 0x01	; 1
 240:	93 95       	inc	r25
 242:	c1 f7       	brne	.-16     	; 0x234 <lrint+0x3e>
 244:	bb 0f       	add	r27, r27
 246:	30 f4       	brcc	.+12     	; 0x254 <lrint+0x5e>
 248:	11 f4       	brne	.+4      	; 0x24e <lrint+0x58>
 24a:	60 ff       	sbrs	r22, 0
 24c:	03 c0       	rjmp	.+6      	; 0x254 <lrint+0x5e>
 24e:	6f 5f       	subi	r22, 0xFF	; 255
 250:	7f 4f       	sbci	r23, 0xFF	; 255
 252:	8f 4f       	sbci	r24, 0xFF	; 255
 254:	3e f4       	brtc	.+14     	; 0x264 <lrint+0x6e>
 256:	90 95       	com	r25
 258:	80 95       	com	r24
 25a:	70 95       	com	r23
 25c:	61 95       	neg	r22
 25e:	7f 4f       	sbci	r23, 0xFF	; 255
 260:	8f 4f       	sbci	r24, 0xFF	; 255
 262:	9f 4f       	sbci	r25, 0xFF	; 255
 264:	08 95       	ret
 266:	68 94       	set
 268:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__fp_szero>
 26c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__fp_zero>

00000270 <__fp_split3>:
 270:	57 fd       	sbrc	r21, 7
 272:	90 58       	subi	r25, 0x80	; 128
 274:	44 0f       	add	r20, r20
 276:	55 1f       	adc	r21, r21
 278:	59 f0       	breq	.+22     	; 0x290 <__fp_splitA+0x10>
 27a:	5f 3f       	cpi	r21, 0xFF	; 255
 27c:	71 f0       	breq	.+28     	; 0x29a <__fp_splitA+0x1a>
 27e:	47 95       	ror	r20

00000280 <__fp_splitA>:
 280:	88 0f       	add	r24, r24
 282:	97 fb       	bst	r25, 7
 284:	99 1f       	adc	r25, r25
 286:	61 f0       	breq	.+24     	; 0x2a0 <__fp_splitA+0x20>
 288:	9f 3f       	cpi	r25, 0xFF	; 255
 28a:	79 f0       	breq	.+30     	; 0x2aa <__fp_splitA+0x2a>
 28c:	87 95       	ror	r24
 28e:	08 95       	ret
 290:	12 16       	cp	r1, r18
 292:	13 06       	cpc	r1, r19
 294:	14 06       	cpc	r1, r20
 296:	55 1f       	adc	r21, r21
 298:	f2 cf       	rjmp	.-28     	; 0x27e <__fp_split3+0xe>
 29a:	46 95       	lsr	r20
 29c:	f1 df       	rcall	.-30     	; 0x280 <__fp_splitA>
 29e:	08 c0       	rjmp	.+16     	; 0x2b0 <__fp_splitA+0x30>
 2a0:	16 16       	cp	r1, r22
 2a2:	17 06       	cpc	r1, r23
 2a4:	18 06       	cpc	r1, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	f1 cf       	rjmp	.-30     	; 0x28c <__fp_splitA+0xc>
 2aa:	86 95       	lsr	r24
 2ac:	71 05       	cpc	r23, r1
 2ae:	61 05       	cpc	r22, r1
 2b0:	08 94       	sec
 2b2:	08 95       	ret

000002b4 <__fp_zero>:
 2b4:	e8 94       	clt

000002b6 <__fp_szero>:
 2b6:	bb 27       	eor	r27, r27
 2b8:	66 27       	eor	r22, r22
 2ba:	77 27       	eor	r23, r23
 2bc:	cb 01       	movw	r24, r22
 2be:	97 f9       	bld	r25, 7
 2c0:	08 95       	ret

000002c2 <__divmodsi4>:
 2c2:	05 2e       	mov	r0, r21
 2c4:	97 fb       	bst	r25, 7
 2c6:	1e f4       	brtc	.+6      	; 0x2ce <__divmodsi4+0xc>
 2c8:	00 94       	com	r0
 2ca:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__negsi2>
 2ce:	57 fd       	sbrc	r21, 7
 2d0:	07 d0       	rcall	.+14     	; 0x2e0 <__divmodsi4_neg2>
 2d2:	0e 94 80 01 	call	0x300	; 0x300 <__udivmodsi4>
 2d6:	07 fc       	sbrc	r0, 7
 2d8:	03 d0       	rcall	.+6      	; 0x2e0 <__divmodsi4_neg2>
 2da:	4e f4       	brtc	.+18     	; 0x2ee <__divmodsi4_exit>
 2dc:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__negsi2>

000002e0 <__divmodsi4_neg2>:
 2e0:	50 95       	com	r21
 2e2:	40 95       	com	r20
 2e4:	30 95       	com	r19
 2e6:	21 95       	neg	r18
 2e8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ea:	4f 4f       	sbci	r20, 0xFF	; 255
 2ec:	5f 4f       	sbci	r21, 0xFF	; 255

000002ee <__divmodsi4_exit>:
 2ee:	08 95       	ret

000002f0 <__negsi2>:
 2f0:	90 95       	com	r25
 2f2:	80 95       	com	r24
 2f4:	70 95       	com	r23
 2f6:	61 95       	neg	r22
 2f8:	7f 4f       	sbci	r23, 0xFF	; 255
 2fa:	8f 4f       	sbci	r24, 0xFF	; 255
 2fc:	9f 4f       	sbci	r25, 0xFF	; 255
 2fe:	08 95       	ret

00000300 <__udivmodsi4>:
 300:	a1 e2       	ldi	r26, 0x21	; 33
 302:	1a 2e       	mov	r1, r26
 304:	aa 1b       	sub	r26, r26
 306:	bb 1b       	sub	r27, r27
 308:	fd 01       	movw	r30, r26
 30a:	0d c0       	rjmp	.+26     	; 0x326 <__udivmodsi4_ep>

0000030c <__udivmodsi4_loop>:
 30c:	aa 1f       	adc	r26, r26
 30e:	bb 1f       	adc	r27, r27
 310:	ee 1f       	adc	r30, r30
 312:	ff 1f       	adc	r31, r31
 314:	a2 17       	cp	r26, r18
 316:	b3 07       	cpc	r27, r19
 318:	e4 07       	cpc	r30, r20
 31a:	f5 07       	cpc	r31, r21
 31c:	20 f0       	brcs	.+8      	; 0x326 <__udivmodsi4_ep>
 31e:	a2 1b       	sub	r26, r18
 320:	b3 0b       	sbc	r27, r19
 322:	e4 0b       	sbc	r30, r20
 324:	f5 0b       	sbc	r31, r21

00000326 <__udivmodsi4_ep>:
 326:	66 1f       	adc	r22, r22
 328:	77 1f       	adc	r23, r23
 32a:	88 1f       	adc	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	1a 94       	dec	r1
 330:	69 f7       	brne	.-38     	; 0x30c <__udivmodsi4_loop>
 332:	60 95       	com	r22
 334:	70 95       	com	r23
 336:	80 95       	com	r24
 338:	90 95       	com	r25
 33a:	9b 01       	movw	r18, r22
 33c:	ac 01       	movw	r20, r24
 33e:	bd 01       	movw	r22, r26
 340:	cf 01       	movw	r24, r30
 342:	08 95       	ret

00000344 <_exit>:
 344:	f8 94       	cli

00000346 <__stop_program>:
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>
